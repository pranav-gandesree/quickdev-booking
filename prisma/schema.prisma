generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}





model User {
  id             String      @id @default(cuid())
  name           String?
  email          String      @unique
  image          String?
  role           Role        @default(USER) 
  walletAddress  String?    
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  bookingsAsDev  Booking[]   @relation("DevBookings")
  bookingsAsUser Booking[]   @relation("UserBookings")

  developerProfile DeveloperProfile?
  
  Account Account[]
  Session Session[]
}


model DeveloperProfile {
  id             String         @id @default(cuid())
  userId         String         @unique
  bio            String?
  github         String?        
  portfolio      String?        
  hourlyRate     Float? 
  walletAddress   String?      
  availability   Boolean        @default(true)  
  technologies   String[]       
  experience     String?        
  user           User           @relation(fields: [userId], references: [id])
}


model Booking {
  id          String    @id @default(cuid())
  userId      String
  devId       String
  date        DateTime
  duration    Int       // duration in minutes
  status      BookingStatus @default(PENDING)
  paymentId   String?   // reference to payment
  videoRoomId   String?      // added for video calls
  videoRoomToken String?     // added for video call authentication
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation("UserBookings", fields: [userId], references: [id])
  dev         User      @relation("DevBookings", fields: [devId], references: [id])

  Payment Payment[]
}

model Payment {
  id          String    @id @default(cuid())
  bookingId   String
  amount      Float
  currency    String?    
  status      PaymentStatus @default(PENDING)
  transactionId String? 
  network       String?     // (devnet, mainnet)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  booking     Booking   @relation(fields: [bookingId], references: [id])
}

enum Role {
  USER
  DEVELOPER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
